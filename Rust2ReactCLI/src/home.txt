import React, { useEffect } from 'react';
import './Home.scss';

const Home: React.FC = () => {
  // Example effect using useEffect
  useEffect(() => {
    // Update document title or perform other side effects

    // Simulate cleanup logic when the component unmounts
    return () => {
      console.log('Home component unmounted');
      // Add cleanup logic here if needed
    };
  }, []); // useEffect will run only once, similar to componentDidMount

  return (
    <div className="intro">
      <div className="features">
        <h2 className="feature-heading">ðŸš€ Features</h2>
        <div className="features-item">
        
          <li>
            <strong>Robust Project Structure:</strong> Establish a Component-Based Architecture, ensuring modularity, scalability, and clear separation of concerns within the React application.
          </li><br></br>
          <li>
            <strong>Efficient File Templates:</strong> Integrate fundamental files and boilerplate code, covering components, services, models, environment configurations, and a service worker for accelerated development.
          </li><br></br>
          <li>
            <strong>TypeScript-Powered React App:</strong> Generate React applications with TypeScript, providing strong static typing for an improved developer experience.
          </li><br></br>
          <li>
            <strong>Material-UI Integration & Responsive Design:</strong> Enhance visual appeal and user experience by seamlessly incorporating Material-UI components with responsive design for various devices.
          </li><br></br>
          <li>
            <strong>SPA with Browser Router:</strong> Create a Single Page Application (SPA) with efficient client-side routing for smooth transitions between views, ensuring uninterrupted user navigation.
          </li><br></br>
          <li>
            <strong>Progressive Web App (PWA):</strong> Elevate your app to PWA standards with a foundational service worker. Enable offline access, background updates and optimize caching strategies for static and dynamic content, ensuring improved offline access and responsiveness, even in challenging network conditions.
          </li><br></br>
          <li>
            <strong>Jest Testing:</strong> Ensure application robustness with efficient and reliable Jest testing for React components.
          </li><br></br>
          <li>
            <strong>Environment Configuration:</strong> Manage environment-specific variables through dedicated files (.env.development and .env.production) for streamlined development and production environments.
          </li><br></br>
          <li>
            <strong>React Hooks:</strong> Utilize React Hooks for state management, side effects, and lifecycle events, promoting best practices for managing component lifecycles.
          </li><br></br>
          <li>
            <strong>Security Measures:</strong> Implement security measures in to validate API calls, prevent SQL injection, handle Cross-Site Scripting (XSS), and manage JSON Web Tokens (JWT) for robust protection against common web vulnerabilities.
          </li><br></br>
          <li>
            <strong>Utility Functions:</strong> Access utility functions in utils.tsx for tasks such as debouncing, whitespace checking, email format validation, currency formatting, query string parsing, and date formatting, simplifying and enhancing the development process.
          </li>
          </div>
      </div>
    </div>
  );
};

export default Home;
