/* eslint-disable no-restricted-globals */
const CACHE_NAME = 'my-react-app-cache-v2';
const DYNAMIC_CACHE_NAME = 'my-react-app-dynamic-cache-v1';
const STATIC_CACHE_URLS = [
  '/',
  '/index.html',
  '/manifest.json',
  '/static/js/bundle.js',
  '/static/js/0.chunk.js',
  '/static/js/main.chunk.js',
  '/static/css/main.chunk.css',
];

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => cache.addAll(STATIC_CACHE_URLS))
  );
});

self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((name) => {
          if (name !== CACHE_NAME && name !== DYNAMIC_CACHE_NAME) {
            return caches.delete(name);
          }
          return null;
        })
      );
    })
  );
});

self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request).then((staticCacheResponse) => {
      // Check if the request is in the static cache
      if (staticCacheResponse) {
        return staticCacheResponse;
      }

      // If not in static cache, fetch from network and add to dynamic cache
      return fetch(event.request)
        .then((networkResponse) => {
          const clonedResponse = networkResponse.clone();

          caches.open(DYNAMIC_CACHE_NAME).then((cache) => {
            cache.put(event.request, clonedResponse);
          });

          return networkResponse;
        })
        .catch(() => {
          // If fetching from network fails, check if request is in dynamic cache
          return caches.match(event.request).then((dynamicCacheResponse) => {
            if (dynamicCacheResponse) {
              return dynamicCacheResponse;
            }

            // If not in dynamic cache, return a custom offline response
            return new Response('Offline content goes here', {
              headers: { 'Content-Type': 'text/html' },
            });
          });
        });
    })
  );
});
