import React, { Suspense, useEffect, useState } from 'react';
import { BrowserRouter as Router, Route, Routes, Outlet } from 'react-router-dom';
import { AppBar, Toolbar, Button, CircularProgress, CssBaseline } from '@mui/material';
import { ThemeProvider } from '@mui/material/styles';
import theme from './Styles/theme';
import './Styles/main.scss';
import Home from './Components/Home/Home';
import PlaceholderComponent1 from './Components/PlaceholderComponent1/PlaceholderComponent1';
import PlaceholderComponent2 from './Components/PlaceholderComponent2/PlaceholderComponent2';
import Link from './Link';

const loading = (
  <div className="pt-3 text-center">
    <CircularProgress />
  </div>
);

const Navbar = () => (
  <AppBar position="static">
    <Toolbar>
      <nav>
        <div>
          <Link to="/">
            <Button color="inherit">Home</Button>
          </Link>
          <Link to="/placeholder/1">
            <Button color="inherit">Placeholder Component 1</Button>
          </Link>
          <Link to="/placeholder/2">
            <Button color="inherit">Placeholder Component 2</Button>
          </Link>
        </div>
      </nav>
    </Toolbar>
  </AppBar>
);

const PlaceholderComponents = () => (
  <Outlet />
);

const App: React.FC = () => {
  // Example of using state with useState hook
  const [isServiceWorkerRegistered, setServiceWorkerRegistered] = useState(false);

  // Example of using useEffect hook for side effects
  useEffect(() => {
    // Register the service worker for PWA
    if ('serviceWorker' in navigator) {
      const serviceWorkerPath = `${process.env.PUBLIC_URL}/service-worker.js`;

      navigator.serviceWorker
        .register(serviceWorkerPath)
        .then((registration: ServiceWorkerRegistration) => {
          console.log('Service Worker registered with scope:', registration.scope);
          setServiceWorkerRegistered(true);
        })
        .catch((error: Error) => {
          console.error('Error registering Service Worker:', error);
        });
    }
  }, []); // Empty dependency array means it runs once on mount

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Router>
        <Suspense fallback={loading}>
          <Navbar />
          {isServiceWorkerRegistered && <p>Service Worker is registered!</p>}
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/placeholder/*" element={<PlaceholderComponents />}>
              <Route path="1" element={<PlaceholderComponent1 />} />
              <Route path="2" element={<PlaceholderComponent2 />} />
            </Route>
          </Routes>
        </Suspense>
      </Router>
    </ThemeProvider>
  );
};

export default App;
